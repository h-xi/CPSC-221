Priority Queue: 

Operations: 

- Create
- Destroy 
- Insert
- deleteMin 
- isEmpty 

Property: For two elements in the PQ, x & y, if x has a lower priority, x will be deleted before y

Implementation: 

Unsorted Array -> Toss everything into array, find the smallest 

Insert = O(1)
deleteMin = O(n)

Sorted Array -> Sort by decreasing, delete from end

Insert = O(n)
deleteMin = O(1)

Linked List --> Highest priority in head 

Insert = O(n)
deleteMin = O(1)

Binary Heap: 

- Parent key is less than equal to children's keys 
- Minimum is always at top 

Stucture Property: 
- Complete tree 
- Result : Depth is always O(logn) --> next open location always known 

Storage Trick --> Store heap in array: 

left child = 2i + 1
right child = 2i + 2 
parent = floor((i-1)/2)
root = 0 
next free = size 

HeapifyUp = Compare node to parent, if parent node is greater, swap with parent --> recursively 

HeapifyDown = compare node to child, if child node is smaller, swap with child --> recrusively


Building a Heap: 

1) Create an empty heap, for each item, insert into heap 
- insert = O(logn!) --> theta(nlogn)

2) Floy'd Method --> BuildHeap --> O(nlogn)
    - Only one node can result in our worst possible cost (logn)
    - Total cost is proportional to total # of edges 
    - if tree has n nodes --> n-1 edges 
    - Run time --> O(n)



